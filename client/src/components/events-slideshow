import React, { useEffect, useRef, useState } from "react";
import type { EventItem } from "../pages/events";

/**
 * Converts a GitHub blob link at a specific commit to a raw file URL.
 */
function githubBlobToRaw(url: string): string {
  const match = url.match(/^https:\/\/github\.com\/([^/]+)\/([^/]+)\/blob\/([^/]+)\/(.+)$/);
  if (!match) return url;
  const [, owner, repo, commit, path] = match;
  return `https://raw.githubusercontent.com/${owner}/${repo}/${commit}/${path}`;
}

interface EventsSlideshowProps {
  events: EventItem[];
  eventPageBasePath?: string; // Defaults to "/events"
}

const SLIDE_INTERVAL = 2000; // 2 seconds

const EventsSlideshow: React.FC<EventsSlideshowProps> = ({
  events,
  eventPageBasePath = "/events"
}) => {
  // Sort events: newest (last) first, then pick top 5
  const sortedEvents = [...events].reverse().slice(0, 5);

  const [index, setIndex] = useState(0);
  const timeoutRef = useRef<NodeJS.Timeout>();

  // Auto-slide logic
  useEffect(() => {
    if (sortedEvents.length <= 1) return;
    timeoutRef.current = setTimeout(() => {
      setIndex((prev) => (prev + 1) % sortedEvents.length);
    }, SLIDE_INTERVAL);
    return () => {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
  }, [index, sortedEvents.length]);

  if (sortedEvents.length === 0) return null;

  // Helper to get first image for event
  function getFirstImage(event: EventItem): string | undefined {
    const images = [event.IMG_1, event.IMG_2, event.IMG_3]
      .filter(Boolean)
      .map(url => url ? githubBlobToRaw(url) : "");
    return images[0];
  }

  // Helper to get event link (customize for your routing)
  function getEventLink(event: EventItem, idx: number): string {
    // If there's a unique event id/slug, use it. This is a fallback!
    if ("id" in event) return `${eventPageBasePath}/${(event as any).id}`;
    // Or use title as anchor (be sure to sanitize in real usage)
    return `${eventPageBasePath}#event-${idx}`;
  }

  return (
    <div className="w-full max-w-4xl mx-auto relative overflow-hidden rounded-xl shadow-lg mb-8">
      {/* Slides */}
      <div
        className="flex transition-transform duration-700 ease-in-out"
        style={{ transform: `translateX(-${index * 100}%)` }}
      >
        {sortedEvents.map((event, i) => {
          const img = getFirstImage(event);
          return (
            <a
              href={getEventLink(event, events.length - 1 - i)}
              key={i}
              className="block flex-none w-full h-64 sm:h-80 md:h-96 bg-gray-200 relative group"
              style={{ minWidth: "100%", maxWidth: "100%" }}
              tabIndex={0}
              aria-label={`Go to event: ${event.TITLE}`}
            >
              {img ? (
                <img
                  src={img}
                  alt={event.TITLE}
                  className="w-full h-full object-cover object-center transition-transform duration-500 group-hover:scale-105"
                  draggable={false}
                  onContextMenu={e => e.preventDefault()}
                  style={{
                    borderRadius: "0.75rem 0.75rem 0 0",
                    pointerEvents: "none",
                    userSelect: "none"
                  }}
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center text-gray-400 text-2xl font-bold">
                  No image
                </div>
              )}
              {/* Overlay with event info */}
              <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-black/0 px-6 py-4">
                <h3 className="text-xl md:text-2xl font-semibold text-white drop-shadow">
                  {event.TITLE}
                </h3>
                <p className="text-white/90 text-sm line-clamp-2">
                  {event.DESCRIPTION ? event.DESCRIPTION.trim() : "No description"}
                </p>
              </div>
            </a>
          );
        })}
      </div>
      {/* Dots */}
      <div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2 z-10">
        {sortedEvents.map((_, i) => (
          <button
            key={i}
            className={`h-2.5 w-2.5 rounded-full transition-all duration-200 border-none outline-none shadow
              ${i === index ? "bg-indigo-600 scale-125" : "bg-white/70"}
            `}
            onClick={() => setIndex(i)}
            aria-label={`Show slide ${i + 1}`}
            style={{ boxShadow: i === index ? "0 0 0 2px #6366f1" : undefined }}
          />
        ))}
      </div>
      {/* Prev/Next Controls */}
      <button
        className="absolute left-3 top-1/2 -translate-y-1/2 bg-white bg-opacity-70 rounded-full shadow p-2 hover:bg-indigo-500 hover:text-white text-gray-700 transition-all z-10"
        onClick={() => setIndex(i => (i === 0 ? sortedEvents.length - 1 : i - 1))}
        aria-label="Previous slide"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width={22} height={22} fill="none" viewBox="0 0 24 24"><path d="M15 6l-6 6 6 6" stroke="currentColor" strokeWidth={2} strokeLinecap="round" strokeLinejoin="round"/></svg>
      </button>
      <button
        className="absolute right-3 top-1/2 -translate-y-1/2 bg-white bg-opacity-70 rounded-full shadow p-2 hover:bg-indigo-500 hover:text-white text-gray-700 transition-all z-10"
        onClick={() => setIndex(i => (i === sortedEvents.length - 1 ? 0 : i + 1))}
        aria-label="Next slide"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width={22} height={22} fill="none" viewBox="0 0 24 24"><path d="M9 18l6-6-6-6" stroke="currentColor" strokeWidth={2} strokeLinecap="round" strokeLinejoin="round"/></svg>
      </button>
    </div>
  );
};

export default EventsSlideshow;
